{
    /* Used for storage in redis so multiple coins can share the same redis instance. */
    "coin": "arogon",

    /* Used for front-end display */
    "symbol": "AROG",

    /* Minimum units in a single coin, see COIN constant in DAEMON_CODE/src/cryptonote_config.h */
    "coinUnits": 100,

    /* Coin network time to mine one block, see DIFFICULTY_TARGET constant in DAEMON_CODE/src/cryptonote_config.h */
    "coinDifficultyTarget": 30,

    "logging": {

        "files": {

            /* Specifies the level of log output verbosity. This level and anything
               more severe will be logged. Options are: info, warn, or error. */
            "level": "info",

            /* Directory where to write log files. */
            "directory": "logs",

            /* How often (in seconds) to append/flush data to the log files. */
            "flushInterval": 5
        },

        "console": {
            "level": "info",
            /* Gives console output useful colors. If you direct that output to a log file
               then disable this feature to avoid nasty characters in the file. */
            "colors": true
        }
    },

    /* Modular Pool Server */
    "poolServer": {
        "enabled": true,

        /* Set to "auto" by default which will spawn one process/fork/worker for each CPU
           core in your system. Each of these workers will run a separate instance of your
           pool(s), and the kernel will load balance miners using these forks. Optionally,
           the 'forks' field can be a number for how many forks will be spawned. */
        "clusterForks": "auto",

        /* Address where block rewards go, and miner payments come from. */
        "poolAddress": "aRogbxicz6THaNbqb7z6hN5wChne6c97TXSxGMcWwKYNjbxSCwSkBEjRAPjy5EatsdMJYwRQcuqWGfySHrVjLK456STBonTLQrN"

        /* Poll RPC daemons for new blocks every this many milliseconds. */
        "blockRefreshInterval": 1000,

        /* How many seconds until we consider a miner disconnected. */
        "minerTimeout": 900,

        "ports": [
            {
                "port": 3333, //Port for mining apps to connect to
                "difficulty": 100, //Initial difficulty miners are set to
                "desc": "Low end hardware" //Description of port
            },
            {
                "port": 5555,
                "difficulty": 2000,
                "desc": "Mid range hardware"
            },
            {
                "port": 7777,
                "difficulty": 10000,
                "desc": "High end hardware"
            }
        ],

        /* Variable difficulty is a feature that will automatically adjust difficulty for
           individual miners based on their hashrate in order to lower networking and CPU
           overhead. */
        "varDiff": {
            "minDiff": 2, //Minimum difficulty
            "maxDiff": 100000,
            "targetTime": 100, //Try to get 1 share per this many seconds
            "retargetTime": 30, //Check to see if we should retarget every this many seconds
            "variancePercent": 30, //Allow time to very this % from target without retargeting
            "maxJump": 100 //Limit diff percent increase/decrease in a single retargeting
        },

        /* Set difficulty on miner client side by passing <address> param with .<difficulty> postfix
           minerd -u D3z2DDWygoZU4NniCNa4oMjjKi45dC2KHUWUyD1RZ1pfgnRgcHdfLVQgh5gmRv4jwEjCX5LoLERAf5PbjLS43Rkd8vFUM1m.5000 */
        "fixedDiff": {
            "enabled": true,
            "separator": ".", // character separator between <address> and <difficulty>
        },

        /* Feature to trust share difficulties from miners which can
           significantly reduce CPU load. */
        "shareTrust": {
          "enabled": false, //enable or disable the shareTrust system. shareTrust can offer significant CPU workload reduction, however does present a risk of being exploited by miners gaming the percentages of the system.
          "maxTrustPercent": 50, //The maximum percent chance a share will be considered trusted (not fully validated) 50 means 1 of 2 shares are fully validated at random, 75 means 1 of 4 are fully validated (or 3 of 4 are trusted).
          "probabilityStepPercent": 1, //The percent the probabality of a share is trusted increases from 0 to maxTrustPercent at a maximum rate of once per probabilityStepWindow seconds in steps of probabilityStepPercent and only on share submission.
          "probabilityStepWindow": 30, //The probability (chance a share is considered trusted) will increase from 0 to maxTrustPercent by steps of probabilityStepPercent at a maximum rate of once every probabilityStepWindow seconds.
          "minUntrustedShares": 50, //The minimum amount of shares that will be fully validated before shareTrust will begin.
          "minUntrustedSeconds": 300, //The minimum amount of time in seconds shares will be fully validated before shareTrust will begin.
          "maxTrustedDifficulty": 100000, //Shares above this difficulty will be fully validated (not trusted).
          "maxPenaltyMultiplier": 100, //The maximum penalty multiplied against minUntrustedShares and minUntrustedSeconds.
          "minPenaltyMultiplier": 2, //The minimum penalty multiplied against minUntrustedShares and minUntrustedSeconds.
          "penaltyMultiplierStep": 1, //The penalty is multiplied against minUntrustedShares and minUntrustedSeconds. The penalty Steps up/down penaltyMultiplierStep a maximum of once per every penaltyStepUpWindow or penaltyStepDownWindow and only on share submission.
          "penaltyStepUpWindow": 30, //The penalty steps up a maximum of penaltyMultiplierStep every penaltyStepUpWindow seconds and only on share submission.
          "penaltyStepDownWindow": 120, //The penalty steps down a maximum of penaltyMultiplierStep every penaltyStepDownWindow seconds and only on share submission.
          "maxShareWindow": 300, //Must Submit within this window or minUntrustedSeconds, minUntrustedShares and Probability are reset.
          "maxIPCRate": 15, //The minimum amount of seconds between sharing a miners shareTrust data between pool threads.
          "maxAge": 604800 //Maximum seconds to retain dissconnected miner shareTrust data in memory.
        },

        /* If under low-diff share attack we can ban their IP to reduce system/network load. */
        "banning": {
            "enabled": true,
            "time": 600, //How many seconds to ban worker for
            "invalidPercent": 25, //What percent of invalid shares triggers ban
            "checkThreshold": 30 //Perform check when this many shares have been submitted
        },
        /* Slush Mining is a reward calculation technique which disincentivizes pool hopping and rewards users to mine with the pool steadily: Values of each share decrease in time â€“ younger shares are valued higher than older shares.
        More about it here: https://mining.bitcoin.cz/help/#!/manual/rewards */
        /* There is some bugs with enabled slushMining. Use with '"enabled": false' only. */

        "slushMining": {
            "enabled": false, // 'true' enables slush mining. Recommended for pools catering to professional miners
            "weight": 120, //defines how fast value assigned to a share declines in time
            "lastBlockCheckRate": 1 //How often the pool checks for the timestamp of the last block. Lower numbers increase load for the Redis db, but make the share value more precise.
        }
    },

    /* Module that sends payments to miners according to their submitted shares. */
    "payments": {
        "enabled": true,
        "interval": 600, //how often to run in seconds
        "maxAddresses": 50, //split up payments if sending to more than this many addresses
        "transferFee": 5000000000, //fee to pay for each transaction
        "minPayment": 100000000000, //miner balance required before sending payment
        "maxTransactionAmount": 0, //split transactions by this amount(to prevent "too big transaction" error)
        "denomination": 100000000000 //truncate to this precision and store remainder
    },

    /* Module that monitors the submitted block maturities and manages rounds. Confirmed
       blocks mark the end of a round where workers' balances are increased in proportion
       to their shares. */
    "blockUnlocker": {
        "enabled": true,
        "interval": 30, //how often to check block statuses in seconds

        /* Block depth required for a block to unlocked/mature. Found in daemon source as
           the variable CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW */
        "depth": 60,
        "poolFee": 1.8, //1.8% pool fee (2% total fee total including donations)
        "devDonation": 0.1, //0.1% donation to send to pool dev - only works with Monero
        "coreDevDonation": 0.1 //0.1% donation to send to core devs - works with Bytecoin, Monero, Dashcoin, QuarazCoin, Fantoncoin, AEON and OneEvilCoin
    },

    /* AJAX API used for front-end website. */
    "api": {
        "enabled": true,
        "hashrateWindow": 600, //how many second worth of shares used to estimate hash rate
        "updateInterval": 3, //gather stats and broadcast every this many seconds
        "host": "127.0.0.1", //if api module is running on a different host (i.e, containerized),
        "port": 8117,
        "blocks": 30, //amount of blocks to send at a time
        "payments": 30, //amount of payments to send at a time
        "password": "test" //password required for admin stats
    },

    /* Coin daemon connection details. */
    "daemon": {
        "host": "127.0.0.1",
        "port": 29081
    },

    /* Wallet daemon connection details. */
    "wallet": {
        "host": "127.0.0.1",
        "port": 29082,
        "password": "<replace with rpc password>"
    },

    /* Redis connection into. */
    "redis": {
        "host": "127.0.0.1",
        "port": 6379
    }

    /* Monitoring RPC services. Statistics will be displayed in Admin panel */
    "monitoring": {
        "daemon": {
            "checkInterval": 60, //interval of sending rpcMethod request
            "rpcMethod": "getblockcount" //RPC method name
        },
        "wallet": {
            "checkInterval": 60,
            "rpcMethod": "getblockcount"
        }

    /* Collect pool statistics to display in frontend charts  */
    "charts": {
        "pool": {
            "hashrate": {
                "enabled": true, //enable data collection and chart displaying in frontend
                "updateInterval": 60, //how often to get current value
                "stepInterval": 1800, //chart step interval calculated as average of all updated values
                "maximumPeriod": 86400 //chart maximum periods (chart points number = maximumPeriod / stepInterval = 48)
            },
            "workers": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 1800, //chart step interval calculated as maximum of all updated values
                "maximumPeriod": 86400
            },
            "difficulty": {
                "enabled": true,
                "updateInterval": 1800,
                "stepInterval": 10800,
                "maximumPeriod": 604800
            },
            "price": { //USD price of one currency coin received from cryptonator.com/api
                "enabled": true,
                "updateInterval": 1800,
                "stepInterval": 10800,
                "maximumPeriod": 604800
            },
            "profit": { //Reward * Rate / Difficulty
                "enabled": true,
                "updateInterval": 1800,
                "stepInterval": 10800,
                "maximumPeriod": 604800
            }
        },
        "user": { //chart data displayed in user stats block
            "hashrate": {
                "enabled": true,
                "updateInterval": 180,
                "stepInterval": 1800,
                "maximumPeriod": 86400
            },
            "payments": { //payment chart uses all user payments data stored in DB
                "enabled": true
            }
        }
}
